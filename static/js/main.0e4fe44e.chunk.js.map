{"version":3,"sources":["utils.js","WebAPI.js","redux/reducers/userReducer.js","pages/LoginPage/LoginPage.js","redux/reducers/postReducer.js","components/Pagination/Pagination.js","pages/HomePage/HomePage.js","pages/PostPage/PostPage.js","pages/AboutMePage/AboutMePage.js","pages/NewPostPage/NewPostPage.js","pages/RegisterPage/RegisterPage.js","pages/EditPage/EditPage.js","components/Header/Header.js","components/App/App.js","redux/store.js","index.js"],"names":["TOKEN_NAME","setAuthToken","token","localStorage","setItem","getAuthToken","getItem","BASE_URL","userReducer","createSlice","name","initialState","user","isLoadingUser","isLoadingGetMe","errorMessage","reducers","setUser","state","action","payload","setIsLoadingUser","setIsLoadingGetMe","setErrorMessage","actions","userLogin","username","password","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","login","data","ok","message","userRegister","nickname","register","getUser","authorization","getMe","response","toString","catch","err","ErrorMessage","styled","div","LoginPage","useState","setUsername","setPassword","history","useHistory","location","useLocation","useDispatch","isLoading","useSelector","store","users","useEffect","pathname","onSubmit","e","preventDefault","push","value","onChange","target","type","postReducer","isLoadingPost","post","newPostResponse","pagePosts","pageNumberCount","setIsLoadingPost","setPost","setNewPostResponse","setPagePosts","setPageNumberCount","getPost","id","getPostAPI","console","log","newPost","title","postArticle","editPost","editArticle","getAllPages","limit","allPosts","get","allPages","Math","ceil","Array","from","length","_","i","getPagePosts","page","getLimitPost","posts","deletePost","deleteArticle","PaginationContainer","PageButton","button","props","active","Pagination","currentPage","setCurrentPage","map","onClick","handleClickPage","Root","PostContainer","PostTitle","Link","PostDate","Post","to","Date","createdAt","toLocaleString","HomePage","PostBody","ButtonWrapper","DeleteButton","EditButton","EditLink","handleDelete","PostPage","useParams","AboutMe","AboutMePage","NewPostContainer","NewPostForm","form","NewPostHeader","NewPostTitle","NewPostTitleInput","input","NewPostBody","NewPostBodyTextarea","textarea","NewPostButtonWrapper","NewPostButton","NewPostPage","setTitle","setBody","placeholder","rows","RegisterPage","setNickname","HeaderContainer","Brand","NavbarList","Nav","$active","LeftContainer","Header","App","basename","exact","path","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"wNAAMA,EAAa,QAENC,EAAe,SAACC,GAC3B,OAAOC,aAAaC,QAAQJ,EAAYE,IAG7BG,EAAe,WAC1B,OAAOF,aAAaG,QAAQN,ICLxBO,EAAW,+CCEJC,EAAcC,YAAY,CACrCC,KAAM,QACNC,aAAc,CACZC,KAAM,KACNC,eAAe,EACfC,gBAAgB,EAChBC,aAAc,MAEhBC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMN,KAAOO,EAAOC,SAGtBC,iBAAkB,SAACH,EAAOC,GACxBD,EAAML,cAAgBM,EAAOC,SAG/BE,kBAAmB,SAACJ,EAAOC,GACzBD,EAAMJ,eAAiBK,EAAOC,SAGhCG,gBAAiB,SAACL,EAAOC,GACvBD,EAAMH,aAAeI,EAAOC,Y,EAU9BZ,EAAYgB,QAJdP,E,EAAAA,QACAI,E,EAAAA,iBACAC,E,EAAAA,kBACAC,E,EAAAA,gBAGWE,EAAY,SAACC,EAAUC,GAAX,OAAwB,SAACC,GAChD,ODnBmB,SAACF,EAAUC,GAC9B,OAAOE,MAAM,GAAD,OAAItB,EAAJ,UAAsB,CAChCuB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBR,WACAC,eAEDQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UCSdC,CAAMZ,EAAUC,GAAUQ,MAAK,SAACI,GAErC,OADAX,EAASP,GAAiB,IACV,IAAZkB,EAAKC,GACAZ,EAASL,EAAgBgB,EAAKE,WAEvCxC,EAAasC,EAAKrC,OACXqC,QAIEG,EAAe,SAACC,EAAUjB,EAAUC,GAArB,OAAkC,SAACC,GAC7D,ODiCsB,SAACe,EAAUjB,EAAUC,GAC3C,OAAOE,MAAM,GAAD,OAAItB,EAAJ,aAAyB,CACnCuB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBS,WACAjB,WACAC,eAEDQ,MAAK,SAACC,GAAD,OAASA,EAAIC,UC5CdO,CAASD,EAAUjB,EAAUC,GAAUQ,MAAK,SAACI,GAElD,OADAX,EAASP,GAAiB,IACV,IAAZkB,EAAKC,GACAZ,EAASL,EAAgBgB,EAAKE,WAEvCxC,EAAasC,EAAKrC,OACXqC,QAIEM,EAAU,kBAAM,SAACjB,GAE5B,OADAA,EAASN,GAAkB,ID5BR,WACnB,IAAMpB,EAAQG,IACd,OAAOwB,MAAM,GAAD,OAAItB,EAAJ,OAAmB,CAC7BwB,QAAS,CACPe,cAAc,UAAD,OAAY5C,MAE1BiC,MAAK,SAACC,GAAD,OAASA,EAAIC,UCuBdU,GACJZ,MAAK,SAACa,GACL,OAAoB,IAAhBA,EAASR,IACXvC,EAAa,IACN2B,EAASL,EAAgByB,EAASC,eAE3CrB,EAASX,EAAQ+B,EAAST,OAC1BX,EAASN,GAAkB,IACpB0B,MAERE,OAAM,SAACC,GACN,OAAOvB,EAASL,EAAgB4B,SAIvB3C,IAAf,Q,sFCjEA,IAAM4C,EAAeC,IAAOC,IAAV,KAIH,SAASC,IAAa,IAAD,EACFC,mBAAS,IADP,mBAC3B9B,EAD2B,KACjB+B,EADiB,OAEFD,mBAAS,IAFP,mBAE3B7B,EAF2B,KAEjB+B,EAFiB,KAG5BC,EAAUC,cACVC,EAAWC,cACXlC,EAAWmC,cACXC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMtD,iBAC/CE,EAAekD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMpD,gBA2BxD,OAPAqD,qBAAU,WAEJP,EAASQ,UACXzC,EAASL,EAAgB,SAE1B,CAACK,EAAUiC,IAGZ,uBAAMS,SA1Ba,SAACC,GACpBA,EAAEC,iBACF5C,EAASL,EAAgB,OACrByC,IACJpC,EAASP,GAAiB,IAE1BO,EAASH,EAAUC,EAAUC,IAAWQ,MAAK,WACtChC,aAAaD,OAElB0B,EAASiB,KAAWV,MAAK,SAACa,GACxBpB,EAASN,GAAkB,IACP,IAAhB0B,EAASR,IACXmB,EAAQc,KAAK,aAcnB,UACE,4CACY,IACV,uBACEC,MAAOhD,EACPiD,SAAU,SAACJ,GACTd,EAAYc,EAAEK,OAAOF,aAI3B,4CACY,IACV,uBACEG,KAAK,WACLH,MAAO/C,EACPgD,SAAU,SAACJ,GACTb,EAAYa,EAAEK,OAAOF,aAI3B,kDACC3D,GAAgB,cAACqC,EAAD,UAAerC,OC9D/B,IAAM+D,EAAcrE,YAAY,CACrCC,KAAM,QACNC,aAAc,CACZoE,eAAe,EACfC,KAAM,KACNC,gBAAiB,KACjBC,UAAW,GACXC,gBAAiB,IAEnBnE,SAAU,CACRoE,iBAAkB,SAAClE,EAAOC,GACxBD,EAAM6D,cAAgB5D,EAAOC,SAG/BiE,QAAS,SAACnE,EAAOC,GACfD,EAAM8D,KAAO7D,EAAOC,SAGtBkE,mBAAoB,SAACpE,EAAOC,GAC1BD,EAAM+D,gBAAkB9D,EAAOC,SAGjCmE,aAAc,SAACrE,EAAOC,GACpBD,EAAMgE,UAAY/D,EAAOC,SAG3BoE,mBAAoB,SAACtE,EAAOC,GAC1BD,EAAMiE,gBAAkBhE,EAAOC,Y,EAWjC0D,EAAYtD,QALd4D,E,EAAAA,iBACAC,E,EAAAA,QACAC,E,EAAAA,mBACAC,E,EAAAA,aACAC,E,EAAAA,mBAGWC,EAAU,SAACC,GAAD,OAAQ,SAAC9D,GAC9BA,EAASwD,GAAiB,IH3CL,SAACM,GACtB,OAAO7D,MAAM,GAAD,OAAItB,EAAJ,kBAAsBmF,EAAtB,kBAAyCvD,MAAK,SAACC,GAAD,OACxDA,EAAIC,UG0CNsD,CAAWD,GACRvD,MAAK,SAACC,GACLR,EAASyD,EAAQjD,IACjBR,EAASwD,GAAiB,OAE3BlC,OAAM,SAACC,GACNyC,QAAQC,IAAI1C,QAIL2C,EAAU,SAACC,EAAO/D,GAAR,OAAiB,SAACJ,GAEvC,OHtByB,SAACmE,EAAO/D,GACjC,IAAM9B,EAAQG,IACd,OAAOwB,MAAM,GAAD,OAAItB,EAAJ,UAAsB,CAChCuB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBe,cAAc,UAAD,OAAY5C,IAE3B8B,KAAMC,KAAKC,UAAU,CACnB6D,QACA/D,WAEDG,MAAK,SAACC,GAAD,OAASA,EAAIC,UGUd2D,CAAYD,EAAO/D,GAAMG,MAAK,SAACC,GAEpC,OADAR,EAAS0D,EAAmBlD,IACrBA,OAIE6D,EAAW,SAACP,EAAIK,EAAO/D,GAAZ,OAAqB,SAACJ,GAC5C,OHHyB,SAAC8D,EAAIK,EAAO/D,GACrC,IAAM9B,EAAQG,IACd,OAAOwB,MAAM,GAAD,OAAItB,EAAJ,kBAAsBmF,GAAM,CACtC5D,OAAQ,QACRC,QAAS,CACP,eAAgB,mBAChBe,cAAc,UAAD,OAAY5C,IAE3B8B,KAAMC,KAAKC,UAAU,CACnB6D,QACA/D,WAEDG,MAAK,SAACC,GAAD,OAASA,EAAIC,UGTd6D,CAAYR,EAAIK,EAAO/D,GAAMG,MAAK,SAACC,GAExC,OADAR,EAAS0D,EAAmBlD,IACrBA,OAIE+D,EAAc,SAACC,GAAD,OAAW,SAACxE,GHxE9BC,MAAM,GAAD,OAAItB,EAAJ,uDGyEE4B,MAAK,SAACC,GAClB,IAAMiE,EAAWjE,EAAIL,QAAQuE,IAAI,iBAC3BC,EAAWC,KAAKC,KAAKJ,EAAWD,GACtCxE,EACE4D,EAAmBkB,MAAMC,KAAK,CAAEC,OAAQL,IAAY,SAACM,EAAGC,GAAJ,OAAUA,EAAI,YAK3DC,EAAe,SAACC,EAAMZ,GAAP,OAAiB,SAACxE,GAC5CA,EAASwD,GAAiB,IH1EA,SAAC4B,EAAMZ,GACjC,OAAOvE,MAAM,GAAD,OACPtB,EADO,wBACiByG,EADjB,mBACgCZ,EADhC,iCAEVjE,MAAK,SAACC,GAAD,OAASA,EAAIC,UGyEpB4E,CAAaD,EAAMZ,GAAOjE,MAAK,SAAC+E,GAC9BtF,EAAS2D,EAAa2B,OAGxBtF,EAASwD,GAAiB,MAGf+B,EAAa,SAACzB,GAAD,OAAQ,SAAC9D,GACjC,OHzC2B,SAAC8D,GAC5B,IAAMxF,EAAQG,IACd,OAAOwB,MAAM,GAAD,OAAItB,EAAJ,kBAAsBmF,GAAM,CACtC5D,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChBe,cAAc,UAAD,OAAY5C,MAE1BiC,MAAK,SAACC,GAAD,OAASA,EAAIC,UGiCd+E,CAAc1B,GAAIvD,MAAK,SAACC,GAC7B,OAAOA,OAII0C,IAAf,Q,6YCjGA,IAAMuC,EAAsBhE,IAAOC,IAAV,KAInBgE,EAAajE,IAAOkE,OAAV,KAOA,SAACC,GAAD,OACZA,EAAMC,OAAS,qBAAuB,wBAO3B,SAASC,EAAT,GAAiD,IAA3BvC,EAA0B,EAA1BA,gBAAiBiB,EAAS,EAATA,MAC9CxE,EAAWmC,cAD4C,EAEvBP,mBAAS,GAFc,mBAEtDmE,EAFsD,KAEzCC,EAFyC,KAS7D,OACE,cAACP,EAAD,UACGlC,EAAgB0C,KAAI,SAACb,GAAD,OACnB,cAACM,EAAD,CACEG,OAAQT,IAASW,EACjBG,QAAS,kBAVO,SAACd,GACvBpF,EAASmF,EAAaC,EAAMZ,IAC5BwB,EAAeZ,GAQMe,CAAgBf,IAFjC,SAIGA,S,6iBCjCX,IAAMgB,GAAO3E,IAAOC,IAAV,KAKJ2E,GAAgB5E,IAAOC,IAAV,KAQb4E,GAAY7E,YAAO8E,IAAP9E,CAAH,KAMT+E,GAAW/E,IAAOC,IAAV,KAId,SAAS+E,GAAT,GAAyB,IAATrD,EAAQ,EAARA,KACd,OACE,eAACiD,GAAD,WACE,cAACC,GAAD,CAAWI,GAAE,gBAAWtD,EAAKU,IAA7B,SAAoCV,EAAKe,QACzC,cAACqC,GAAD,UAAW,IAAIG,KAAKvD,EAAKwD,WAAWC,sBAS3B,SAASC,KACtB,IAAM9G,EAAWmC,cACXC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAMnC,iBAC/CmC,EAAQjD,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAMhC,aAC3CC,EAAkBlB,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAM/B,mBAS3D,OALAf,qBAAU,WACRxC,EAASuE,EAJG,IAKZvE,EAASmF,EAJE,EADC,MAMX,CAACnF,IAGF,cAACoG,GAAD,WACIhE,GACA,qCACGkD,EAAMW,KAAI,SAAC7C,GAAD,OACT,cAACqD,GAAD,CAAoBrD,KAAMA,GAAfA,EAAKU,OAElB,cAACgC,EAAD,CAAYvC,gBAAiBA,EAAiBiB,MAfxC,S,6lCC1ChB,IAAM4B,GAAO3E,IAAOC,IAAV,MAKJ2E,GAAgB5E,IAAOC,IAAV,MAKb4E,GAAY7E,IAAOC,IAAV,MAIT8E,GAAW/E,IAAOC,IAAV,MAMRqF,GAAWtF,IAAOC,IAAV,MAMRsF,GAAgBvF,IAAOC,IAAV,MAKbuF,GAAexF,IAAOkE,OAAV,MAIZuB,GAAazF,IAAOkE,OAAV,MAMVwB,GAAW1F,YAAO8E,IAAP9E,CAAH,MAOd,SAASgF,GAAT,GAA6C,IAA7BrD,EAA4B,EAA5BA,KAAMgE,EAAsB,EAAtBA,aAAcpI,EAAQ,EAARA,KAClC,OACE,eAAC,GAAD,WACE,cAAC,GAAD,UAAYoE,EAAKe,QACjB,cAAC,GAAD,UAAW,IAAIwC,KAAKvD,EAAKwD,WAAWC,mBACpC,cAACE,GAAD,UAAW3D,EAAKhD,OACfpB,EACC,eAACgI,GAAD,WACE,cAACE,GAAD,UACE,cAACC,GAAD,CAAUT,GAAE,gBAAWtD,EAAKU,IAA5B,4BAEF,cAACmD,GAAD,CAAcf,QAASkB,EAAvB,6BAGF,MAUO,SAASC,KAAY,IAC1BvD,EAAOwD,cAAPxD,GACF9D,EAAWmC,cACXJ,EAAUC,cACVI,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAMnC,iBAC/CC,EAAOf,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAMlC,QAC1CpE,EAAOqD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMvD,QAchD,OAJAwD,qBAAU,WACRxC,EAAS6D,EAAQC,MAChB,CAACA,EAAI9D,IAGN,cAAC,GAAD,WACIoC,GAAagB,EACb,cAAC,GAAD,CAAMA,KAAMA,EAAMgE,aAfH,SAACzE,GACpBA,EAAEC,iBAEF5C,EAASuF,EAAWzB,IAAKvD,MAAK,WAC5BwB,EAAQc,KAAK,SAWmC7D,KAAMA,IAEpD,K,0ICtGR,IAAMuI,GAAU9F,IAAOC,IAAV,MAME,SAAS8F,KACtB,OACE,cAACD,GAAD,yI,iuCCJJ,IAAME,GAAmBhG,IAAOC,IAAV,MAQhBgG,GAAcjG,IAAOkG,KAAV,MAEXC,GAAgBnG,IAAOC,IAAV,MAIbmG,GAAepG,IAAOC,IAAV,MAIZoG,GAAoBrG,IAAOsG,MAAV,MAOjBC,GAAcvG,IAAOC,IAAV,MAIXuG,GAAsBxG,IAAOyG,SAAV,MAOnBC,GAAuB1G,IAAOC,IAAV,MAKpB0G,GAAgB3G,IAAOkE,OAAV,MAQbnE,GAAeC,IAAOC,IAAV,MAKH,SAAS2G,KAAe,IAAD,EACVzG,mBAAS,IADC,mBAC7BuC,EAD6B,KACtBmE,EADsB,OAEZ1G,mBAAS,IAFG,mBAE7BxB,EAF6B,KAEvBmI,EAFuB,OAGI3G,qBAHJ,mBAG7BzC,EAH6B,KAGfQ,EAHe,KAI9BoC,EAAUC,cACVhD,EAAOqD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMvD,QAE1CgB,EAAWmC,cAmBjB,OACE,cAACsF,GAAD,UACGzI,EACC,eAAC0I,GAAD,CAAahF,SApBE,SAACC,GAGpB,OAFAA,EAAEC,iBACFjD,EAAgB,MACXwE,GAAU/D,EAGVpB,OAILgB,EAASkE,EAAQC,EAAO/D,IAAOG,MAAK,SAAC8C,GAC/BA,GAAmBA,EAAgBS,IACrC/B,EAAQc,KAAR,gBAAsBQ,EAAgBS,QALjCnE,EAAgB,wCAHhBA,EAAgB,iEAgBrB,UACE,cAACiI,GAAD,6CACCzI,GAAgB,cAAC,GAAD,UAAeA,IAChC,cAAC0I,GAAD,UACE,cAACC,GAAD,CACEhF,MAAOqB,EACPpB,SAAU,SAACJ,GACT2F,EAAS3F,EAAEK,OAAOF,QAEpB0F,YAAY,2CAGhB,cAACR,GAAD,UACE,cAACC,GAAD,CACEnF,MAAO1C,EACP2C,SAAU,SAACJ,GACT4F,EAAQ5F,EAAEK,OAAOF,QAEnB0F,YAAY,uCACZC,KAAM,OAGV,cAACN,GAAD,UACE,cAACC,GAAD,gCAIJ,cAAC,GAAD,uD,wFCxGR,IAAM5G,GAAeC,IAAOC,IAAV,MAIH,SAASgH,KAAgB,IAAD,EACL9G,mBAAS,IADJ,mBAC9Bb,EAD8B,KACpB4H,EADoB,OAEL/G,mBAAS,IAFJ,mBAE9B9B,EAF8B,KAEpB+B,EAFoB,OAGLD,mBAAS,IAHJ,mBAG9B7B,EAH8B,KAGpB+B,EAHoB,KAI/BC,EAAUC,cACVhC,EAAWmC,cACXF,EAAWC,cACXE,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMtD,iBAC/CE,EAAekD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMpD,gBA2BxD,OAPAqD,qBAAU,WAEJP,EAASQ,UACXzC,EAASL,EAAgB,SAE1B,CAACK,EAAUiC,IAGZ,uBAAMS,SA1Ba,SAACC,GACpBA,EAAEC,iBACF5C,EAASL,EAAgB,OACrByC,IACJpC,EAASP,GAAiB,IAE1BO,EAASc,EAAaC,EAAUjB,EAAUC,IAAWQ,MAAK,WACnDhC,aAAaD,OAElB0B,EAASiB,KAAWV,MAAK,SAACa,GACxBpB,EAASN,GAAkB,IACP,IAAhB0B,EAASR,IACXmB,EAAQc,KAAK,aAcnB,UACE,4CACY,IACV,uBACEC,MAAO/B,EACPgC,SAAU,SAACJ,GACTgG,EAAYhG,EAAEK,OAAOF,aAI3B,4CACY,IACV,uBACEA,MAAOhD,EACPiD,SAAU,SAACJ,GACTd,EAAYc,EAAEK,OAAOF,aAI3B,4CACY,IACV,uBACEG,KAAK,WACLH,MAAO/C,EACPgD,SAAU,SAACJ,GACTb,EAAYa,EAAEK,OAAOF,aAI3B,kDACC3D,GAAgB,cAAC,GAAD,UAAeA,O,iuCC5EtC,IAAMsI,GAAmBhG,IAAOC,IAAV,MAQhBgG,GAAcjG,IAAOkG,KAAV,MAEXC,GAAgBnG,IAAOC,IAAV,MAIbmG,GAAepG,IAAOC,IAAV,MAIZoG,GAAoBrG,IAAOsG,MAAV,MAOjBC,GAAcvG,IAAOC,IAAV,MAIXuG,GAAsBxG,IAAOyG,SAAV,MAOnBC,GAAuB1G,IAAOC,IAAV,MAKpB0G,GAAgB3G,IAAOkE,OAAV,MAQbnE,GAAeC,IAAOC,IAAV,MAKH,SAAS2G,KAAe,IAC7BvE,EAAOwD,cAAPxD,GACF/B,EAAUC,cACVoB,EAAOf,aAAY,SAACC,GAAD,OAAWA,EAAMgD,MAAMlC,QAC1CpE,EAAOqD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMvD,QAJZ,EAKV4C,mBAASwB,EAAKe,OALJ,mBAK7BA,EAL6B,KAKtBmE,EALsB,OAMZ1G,mBAASwB,EAAKhD,MANF,mBAM7BA,EAN6B,KAMvBmI,EANuB,OAOI3G,qBAPJ,mBAO7BzC,EAP6B,KAOfQ,EAPe,KAQ9BK,EAAWmC,cAEjBK,qBAAU,WACRxC,EAAS6D,EAAQC,MAChB,CAACA,EAAI9D,IAoBR,OACE,cAAC,GAAD,UACGhB,EACC,eAAC,GAAD,CAAa0D,SArBE,SAACC,GAIpB,OAHAA,EAAEC,iBAEFjD,EAAgB,MACXwE,GAAU/D,EAGVpB,OAILgB,EAASqE,EAASP,EAAIK,EAAO/D,IAAOG,MAAK,SAAC8C,GACpCA,GAAmBA,EAAgBS,IACrC/B,EAAQc,KAAR,gBAAsBQ,EAAgBS,QALjCnE,EAAgB,wCAHhBA,EAAgB,iEAgBrB,UACE,cAAC,GAAD,6CACCR,GAAgB,cAAC,GAAD,UAAeA,IAChC,cAAC,GAAD,UACE,cAAC,GAAD,CACE2D,MAAOqB,EACPpB,SAAU,SAACJ,GACT2F,EAAS3F,EAAEK,OAAOF,QAEpB0F,YAAY,2CAGhB,cAAC,GAAD,UACE,cAAC,GAAD,CACE1F,MAAO1C,EACP2C,SAAU,SAACJ,GACT4F,EAAQ5F,EAAEK,OAAOF,QAEnB0F,YAAY,uCACZC,KAAM,OAGV,cAAC,GAAD,UACE,cAAC,GAAD,gCAIJ,cAAC,GAAD,uD,sjCCnHR,IAAMG,GAAkBnH,IAAOC,IAAV,MAefmH,GAAQpH,IAAOC,IAAV,MAKLoH,GAAarH,IAAOC,IAAV,MAMVqH,GAAMtH,YAAO8E,IAAP9E,CAAH,MAeL,SAACmE,GAAD,OACAA,EAAMoD,SAAN,yCAMEC,GAAgBxH,IAAOC,IAAV,KAIfoH,IAKW,SAASI,KACtB,IAAMjH,EAAWC,cACXH,EAAUC,cACVhC,EAAWmC,cACXnD,EAAOqD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMvD,QAC1CE,EAAiBmD,aAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMrD,kBAW1D,OACE,eAAC0J,GAAD,WACE,eAACK,GAAD,WACE,cAACJ,GAAD,+DACA,eAACC,GAAD,WACE,cAACC,GAAD,CAAKrC,GAAG,IAAIsC,QAA+B,MAAtB/G,EAASQ,SAA9B,0BAGA,cAACsG,GAAD,CAAKrC,GAAG,YAAYsC,QAA+B,cAAtB/G,EAASQ,SAAtC,uCAKFvD,GACA,cAAC4J,GAAD,UACG9J,EACC,qCACE,cAAC+J,GAAD,CAAKrC,GAAG,WAAWsC,QAA+B,aAAtB/G,EAASQ,SAArC,sCAGA,cAACsG,GAAD,CAAK7C,QA7BI,WACnB7H,EAAa,IACb2B,EAASX,EAAQ,OAES,MAAtB4C,EAASQ,UACXV,EAAQc,KAAK,MAwBL,6BAGF,qCACE,cAACkG,GAAD,CAAKrC,GAAG,YAAYsC,QAA+B,cAAtB/G,EAASQ,SAAtC,0BAGA,cAACsG,GAAD,CAAKrC,GAAG,SAASsC,QAA+B,WAAtB/G,EAASQ,SAAnC,kC,+FC3Fd,IAAM2D,GAAO3E,IAAOC,IAAV,MA4CKyH,OAxCf,WACE,IAAMnJ,EAAWmC,cAOjB,OALAK,qBAAU,WACRxC,EAASiB,KACTjB,EAASN,GAAkB,MAC1B,CAACM,IAGF,cAAC,GAAD,UACE,eAAC,IAAD,CAAQoJ,SAAS,wBAAjB,UACE,cAACF,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAlB,SACE,cAACxC,GAAD,MAEF,cAAC,IAAD,CAAOwC,KAAK,YAAZ,SACE,cAACZ,GAAD,MAEF,cAAC,IAAD,CAAOY,KAAK,SAAZ,SACE,cAAC3H,EAAD,MAEF,cAAC,IAAD,CAAO2H,KAAK,YAAZ,SACE,cAACjC,GAAD,MAEF,cAAC,IAAD,CAAOiC,KAAK,WAAZ,SACE,cAACjB,GAAD,MAEF,cAAC,IAAD,CAAOiB,KAAK,YAAZ,SACE,cAAC9B,GAAD,MAEF,cAAC,IAAD,CAAO8B,KAAK,YAAZ,SACE,cAAC,GAAD,eChDGC,eAAe,CAC5BC,QAAS,CACPlE,MAAOpC,EACPX,MAAO3D,KCDX6K,IAASC,OACP,cAAC,IAAD,CAAUpH,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEFqH,SAASC,eAAe,W","file":"static/js/main.0e4fe44e.chunk.js","sourcesContent":["const TOKEN_NAME = \"token\";\n\nexport const setAuthToken = (token) => {\n  return localStorage.setItem(TOKEN_NAME, token);\n};\n\nexport const getAuthToken = () => {\n  return localStorage.getItem(TOKEN_NAME);\n};\n","import { getAuthToken } from \"./utils\";\n\nconst BASE_URL = \"https://react-blog-json-server.herokuapp.com\";\n\nexport const getAllPosts = () => {\n  return fetch(`${BASE_URL}/posts?_start=0&_end=0&_sort=createdAt&_order=desc`);\n};\n\nexport const getPost = (id) => {\n  return fetch(`${BASE_URL}/posts/${id}?_expand=user`).then((res) =>\n    res.json()\n  );\n};\n\nexport const getLimitPost = (page, limit) => {\n  return fetch(\n    `${BASE_URL}/posts?_page=${page}&_limit=${limit}&_sort=createdAt&_order=desc`\n  ).then((res) => res.json());\n};\n\nexport const login = (username, password) => {\n  return fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const getMe = () => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/me`, {\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  }).then((res) => res.json());\n};\n\nexport const postArticle = (title, body) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const deleteArticle = (id) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      \"content-type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n  }).then((res) => res.json());\n};\n\nexport const editArticle = (id, title, body) => {\n  const token = getAuthToken();\n  return fetch(`${BASE_URL}/posts/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"content-type\": \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  }).then((res) => res.json());\n};\n\nexport const register = (nickname, username, password) => {\n  return fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      nickname,\n      username,\n      password,\n    }),\n  }).then((res) => res.json());\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { login, register, getMe } from \"../../WebAPI\";\nimport { setAuthToken } from \"../../utils\";\n\nexport const userReducer = createSlice({\n  name: \"users\",\n  initialState: {\n    user: null,\n    isLoadingUser: false,\n    isLoadingGetMe: false,\n    errorMessage: null,\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n\n    setIsLoadingUser: (state, action) => {\n      state.isLoadingUser = action.payload;\n    },\n\n    setIsLoadingGetMe: (state, action) => {\n      state.isLoadingGetMe = action.payload;\n    },\n\n    setErrorMessage: (state, action) => {\n      state.errorMessage = action.payload;\n    },\n  },\n});\n\nexport const {\n  setUser,\n  setIsLoadingUser,\n  setIsLoadingGetMe,\n  setErrorMessage,\n} = userReducer.actions;\n\nexport const userLogin = (username, password) => (dispatch) => {\n  return login(username, password).then((data) => {\n    dispatch(setIsLoadingUser(false));\n    if (data.ok === 0) {\n      return dispatch(setErrorMessage(data.message));\n    }\n    setAuthToken(data.token);\n    return data;\n  });\n};\n\nexport const userRegister = (nickname, username, password) => (dispatch) => {\n  return register(nickname, username, password).then((data) => {\n    dispatch(setIsLoadingUser(false));\n    if (data.ok === 0) {\n      return dispatch(setErrorMessage(data.message));\n    }\n    setAuthToken(data.token);\n    return data;\n  });\n};\n\nexport const getUser = () => (dispatch) => {\n  dispatch(setIsLoadingGetMe(true));\n  return getMe()\n    .then((response) => {\n      if (response.ok !== 1) {\n        setAuthToken(\"\");\n        return dispatch(setErrorMessage(response.toString()));\n      }\n      dispatch(setUser(response.data));\n      dispatch(setIsLoadingGetMe(false));\n      return response;\n    })\n    .catch((err) => {\n      return dispatch(setErrorMessage(err));\n    });\n};\n\nexport default userReducer.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setIsLoadingUser,\n  setIsLoadingGetMe,\n  setErrorMessage,\n  userLogin,\n  getUser,\n} from \"../../redux/reducers/userReducer\";\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nexport default function LoginPage() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const isLoading = useSelector((store) => store.users.isLoadingUser);\n  const errorMessage = useSelector((store) => store.users.errorMessage);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setErrorMessage(null));\n    if (isLoading) return;\n    dispatch(setIsLoadingUser(true));\n\n    dispatch(userLogin(username, password)).then(() => {\n      if (!localStorage.token) return;\n\n      dispatch(getUser()).then((response) => {\n        dispatch(setIsLoadingGetMe(false));\n        if (response.ok === 1) {\n          history.push(\"/\");\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    // 每次換頁的時候把 errorMessage 清掉\n    if (location.pathname) {\n      dispatch(setErrorMessage(null));\n    }\n  }, [dispatch, location]);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        username:{\" \"}\n        <input\n          value={username}\n          onChange={(e) => {\n            setUsername(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        password:{\" \"}\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n      </div>\n      <button>登入</button>\n      {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    </form>\n  );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  getPost as getPostAPI,\n  postArticle,\n  editArticle,\n  getAllPosts,\n  getLimitPost,\n  deleteArticle,\n} from \"../../WebAPI\";\n\nexport const postReducer = createSlice({\n  name: \"posts\",\n  initialState: {\n    isLoadingPost: false,\n    post: null,\n    newPostResponse: null,\n    pagePosts: [],\n    pageNumberCount: [],\n  },\n  reducers: {\n    setIsLoadingPost: (state, action) => {\n      state.isLoadingPost = action.payload;\n    },\n\n    setPost: (state, action) => {\n      state.post = action.payload;\n    },\n\n    setNewPostResponse: (state, action) => {\n      state.newPostResponse = action.payload;\n    },\n\n    setPagePosts: (state, action) => {\n      state.pagePosts = action.payload;\n    },\n\n    setPageNumberCount: (state, action) => {\n      state.pageNumberCount = action.payload;\n    },\n  },\n});\n\nexport const {\n  setIsLoadingPost,\n  setPost,\n  setNewPostResponse,\n  setPagePosts,\n  setPageNumberCount,\n} = postReducer.actions;\n\nexport const getPost = (id) => (dispatch) => {\n  dispatch(setIsLoadingPost(true));\n  getPostAPI(id)\n    .then((res) => {\n      dispatch(setPost(res));\n      dispatch(setIsLoadingPost(false));\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport const newPost = (title, body) => (dispatch) => {\n  // 可以變成 promise 傳遞\n  return postArticle(title, body).then((res) => {\n    dispatch(setNewPostResponse(res));\n    return res;\n  });\n};\n\nexport const editPost = (id, title, body) => (dispatch) => {\n  return editArticle(id, title, body).then((res) => {\n    dispatch(setNewPostResponse(res));\n    return res;\n  });\n};\n\nexport const getAllPages = (limit) => (dispatch) => {\n  getAllPosts().then((res) => {\n    const allPosts = res.headers.get(\"X-Total-Count\");\n    const allPages = Math.ceil(allPosts / limit);\n    dispatch(\n      setPageNumberCount(Array.from({ length: allPages }, (_, i) => i + 1))\n    );\n  });\n};\n\nexport const getPagePosts = (page, limit) => (dispatch) => {\n  dispatch(setIsLoadingPost(true));\n\n  getLimitPost(page, limit).then((posts) => {\n    dispatch(setPagePosts(posts));\n  });\n\n  dispatch(setIsLoadingPost(false));\n};\n\nexport const deletePost = (id) => (dispatch) => {\n  return deleteArticle(id).then((res) => {\n    return res;\n  });\n};\n\nexport default postReducer.reducer;\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { getPagePosts } from \"../../redux/reducers/postReducer\";\nimport { useDispatch } from \"react-redux\";\n\nconst PaginationContainer = styled.div`\n  margin: 20px auto;\n  text-align: center;\n`;\nconst PageButton = styled.button`\n  border: 0.5px solid #ddd;\n  font-size: 16px;\n  padding: 5px 10px;\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: 8px;\n  background: ${(props) =>\n    props.active ? \"rgba(0, 0, 0, 0.4)\" : \"rgba(0, 0, 0, 0.1)\"};\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.4);\n  }\n`;\n\nexport default function Pagination({ pageNumberCount, limit }) {\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const handleClickPage = (page) => {\n    dispatch(getPagePosts(page, limit));\n    setCurrentPage(page);\n  };\n\n  return (\n    <PaginationContainer>\n      {pageNumberCount.map((page) => (\n        <PageButton\n          active={page === currentPage}\n          onClick={() => handleClickPage(page)}\n        >\n          {page}\n        </PageButton>\n      ))}\n    </PaginationContainer>\n  );\n}\n\nPagination.propTypes = {\n  setPosts: PropTypes.func,\n  pageNumberCount: PropTypes.array,\n  limit: PropTypes.number,\n};\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"../../components/Pagination/\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllPages, getPagePosts } from \"../../redux/reducers/postReducer\";\n\nconst Root = styled.div`\n  width: 80%;\n  margin: 0 auto;\n`;\n\nconst PostContainer = styled.div`\n  border-bottom: 1px solid rgba(0, 12, 34, 0.2);\n  padding: 16px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n`;\n\nconst PostTitle = styled(Link)`\n  font-size: 24px;\n  color: #333;\n  text-decoration: none;\n`;\n\nconst PostDate = styled.div`\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nfunction Post({ post }) {\n  return (\n    <PostContainer>\n      <PostTitle to={`/post/${post.id}`}>{post.title}</PostTitle>\n      <PostDate>{new Date(post.createdAt).toLocaleString()}</PostDate>\n    </PostContainer>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object,\n};\n\nexport default function HomePage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((store) => store.posts.isLoadingPost);\n  const posts = useSelector((store) => store.posts.pagePosts);\n  const pageNumberCount = useSelector((store) => store.posts.pageNumberCount);\n  const limit = 5;\n  const page = 1;\n\n  useEffect(() => {\n    dispatch(getAllPages(limit));\n    dispatch(getPagePosts(page, limit));\n  }, [dispatch]);\n\n  return (\n    <Root>\n      {!isLoading && (\n        <>\n          {posts.map((post) => (\n            <Post key={post.id} post={post} />\n          ))}\n          <Pagination pageNumberCount={pageNumberCount} limit={limit} />\n        </>\n      )}\n    </Root>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { getPost, deletePost } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst Root = styled.div`\n  width: 60%;\n  margin: 0 auto;\n`;\n\nconst PostContainer = styled.div`\n  border: 1px solid #333;\n  padding: 10px 15px;\n`;\n\nconst PostTitle = styled.div`\n  font-size: 26px;\n`;\n\nconst PostDate = styled.div`\n  border-bottom: 1px solid #333;\n  margin: 10px 0px;\n  font-size: 14px;\n`;\n\nconst PostBody = styled.div`\n  word-break: break-word;\n  font-size: 18px;\n  margin-top: 15px;\n`;\n\nconst ButtonWrapper = styled.div`\n  text-align: right;\n  margin-top: 20px;\n`;\n\nconst DeleteButton = styled.button`\n  cursor: pointer;\n`;\n\nconst EditButton = styled.button`\n  cursor: pointer;\n  margin-right: 5px;\n  padding: 1px;\n`;\n\nconst EditLink = styled(Link)`\n  box-sizing: border-box;\n  text-decoration: none;\n  color: black;\n  padding: 4px 5px;\n`;\n\nfunction Post({ post, handleDelete, user }) {\n  return (\n    <PostContainer>\n      <PostTitle>{post.title}</PostTitle>\n      <PostDate>{new Date(post.createdAt).toLocaleString()}</PostDate>\n      <PostBody>{post.body}</PostBody>\n      {user ? (\n        <ButtonWrapper>\n          <EditButton>\n            <EditLink to={`/edit/${post.id}`}>編輯</EditLink>\n          </EditButton>\n          <DeleteButton onClick={handleDelete}>刪除</DeleteButton>\n        </ButtonWrapper>\n      ) : (\n        \"\"\n      )}\n    </PostContainer>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.object,\n};\n\nexport default function PostPage() {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const isLoading = useSelector((store) => store.posts.isLoadingPost);\n  const post = useSelector((store) => store.posts.post);\n  const user = useSelector((store) => store.users.user);\n\n  const handleDelete = (e) => {\n    e.preventDefault();\n\n    dispatch(deletePost(id)).then(() => {\n      history.push(\"/\");\n    });\n  };\n\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id, dispatch]);\n\n  return (\n    <Root>\n      {!isLoading && post ? (\n        <Post post={post} handleDelete={handleDelete} user={user} />\n      ) : (\n        \"\"\n      )}\n    </Root>\n  );\n}\n","import styled from \"styled-components\";\n\nconst AboutMe = styled.div`\n  font-size: 32px;\n  margin: 20px auto;\n  text-align: center;\n`;\n\nexport default function AboutMePage() {\n  return (\n    <AboutMe>這是程式導師計畫第四期的 React 部落格作業 by ericcch24</AboutMe>\n  );\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { newPost } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst NewPostContainer = styled.div`\n  margin: 10px auto;\n  width: 900px;\n  padding: 30px;\n  border: 1px solid black;\n  box-sizing: border-box;\n`;\n\nconst NewPostForm = styled.form``;\n\nconst NewPostHeader = styled.div`\n  font-size: 20px;\n`;\n\nconst NewPostTitle = styled.div`\n  margin-top: 20px;\n`;\n\nconst NewPostTitleInput = styled.input`\n  width: 98%;\n  padding: 6px;\n  font-size: 100%;\n  font-family: inherit;\n`;\n\nconst NewPostBody = styled.div`\n  margin-top: 30px;\n`;\n\nconst NewPostBodyTextarea = styled.textarea`\n  width: 98%;\n  padding: 6px;\n  font-family: inherit;\n  font-size: 100%;\n`;\n\nconst NewPostButtonWrapper = styled.div`\n  text-align: right;\n  margin-top: 20px;\n`;\n\nconst NewPostButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  padding: 10px 30px;\n  font-family: inherit;\n  font-size: 100%;\n`;\n\nconst ErrorMessage = styled.div`\n  margin-top: 10px;\n  color: red;\n`;\n\nexport default function NewPostPage() {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState();\n  const history = useHistory();\n  const user = useSelector((store) => store.users.user);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setErrorMessage(null);\n    if (!title || !body) {\n      return setErrorMessage(\"請輸入文章標題與內容\");\n    }\n    if (!user) {\n      return setErrorMessage(\"請登入後繼續\");\n    }\n\n    dispatch(newPost(title, body)).then((newPostResponse) => {\n      if (newPostResponse && newPostResponse.id) {\n        history.push(`/post/${newPostResponse.id}`);\n      }\n    });\n  };\n\n  return (\n    <NewPostContainer>\n      {user ? (\n        <NewPostForm onSubmit={handleSubmit}>\n          <NewPostHeader>發布文章：</NewPostHeader>\n          {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n          <NewPostTitle>\n            <NewPostTitleInput\n              value={title}\n              onChange={(e) => {\n                setTitle(e.target.value);\n              }}\n              placeholder=\"輸入文章標題\"\n            />\n          </NewPostTitle>\n          <NewPostBody>\n            <NewPostBodyTextarea\n              value={body}\n              onChange={(e) => {\n                setBody(e.target.value);\n              }}\n              placeholder=\"輸入文章內容\"\n              rows={20}\n            />\n          </NewPostBody>\n          <NewPostButtonWrapper>\n            <NewPostButton>送出</NewPostButton>\n          </NewPostButtonWrapper>\n        </NewPostForm>\n      ) : (\n        <ErrorMessage>\"請登入後繼續\"</ErrorMessage>\n      )}\n    </NewPostContainer>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setIsLoadingUser,\n  setIsLoadingGetMe,\n  setErrorMessage,\n  userRegister,\n  getUser,\n} from \"../../redux/reducers/userReducer\";\n\nconst ErrorMessage = styled.div`\n  color: red;\n`;\n\nexport default function RegisterPage() {\n  const [nickname, setNickname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const isLoading = useSelector((store) => store.users.isLoadingUser);\n  const errorMessage = useSelector((store) => store.users.errorMessage);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(setErrorMessage(null));\n    if (isLoading) return;\n    dispatch(setIsLoadingUser(true));\n\n    dispatch(userRegister(nickname, username, password)).then(() => {\n      if (!localStorage.token) return;\n\n      dispatch(getUser()).then((response) => {\n        dispatch(setIsLoadingGetMe(false));\n        if (response.ok === 1) {\n          history.push(\"/\");\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    // 每次換頁的時候把 errorMessage 清掉\n    if (location.pathname) {\n      dispatch(setErrorMessage(null));\n    }\n  }, [dispatch, location]);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        nickname:{\" \"}\n        <input\n          value={nickname}\n          onChange={(e) => {\n            setNickname(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        username:{\" \"}\n        <input\n          value={username}\n          onChange={(e) => {\n            setUsername(e.target.value);\n          }}\n        />\n      </div>\n      <div>\n        password:{\" \"}\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => {\n            setPassword(e.target.value);\n          }}\n        />\n      </div>\n      <button>註冊</button>\n      {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n    </form>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { getPost, editPost } from \"../../redux/reducers/postReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst NewPostContainer = styled.div`\n  margin: 10px auto;\n  width: 900px;\n  padding: 30px;\n  border: 1px solid black;\n  box-sizing: border-box;\n`;\n\nconst NewPostForm = styled.form``;\n\nconst NewPostHeader = styled.div`\n  font-size: 20px;\n`;\n\nconst NewPostTitle = styled.div`\n  margin-top: 20px;\n`;\n\nconst NewPostTitleInput = styled.input`\n  width: 98%;\n  padding: 6px;\n  font-size: 100%;\n  font-family: inherit;\n`;\n\nconst NewPostBody = styled.div`\n  margin-top: 30px;\n`;\n\nconst NewPostBodyTextarea = styled.textarea`\n  width: 98%;\n  padding: 6px;\n  font-family: inherit;\n  font-size: 100%;\n`;\n\nconst NewPostButtonWrapper = styled.div`\n  text-align: right;\n  margin-top: 20px;\n`;\n\nconst NewPostButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  padding: 10px 30px;\n  font-family: inherit;\n  font-size: 100%;\n`;\n\nconst ErrorMessage = styled.div`\n  margin-top: 10px;\n  color: red;\n`;\n\nexport default function NewPostPage() {\n  const { id } = useParams();\n  const history = useHistory();\n  const post = useSelector((store) => store.posts.post);\n  const user = useSelector((store) => store.users.user);\n  const [title, setTitle] = useState(post.title);\n  const [body, setBody] = useState(post.body);\n  const [errorMessage, setErrorMessage] = useState();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id, dispatch]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setErrorMessage(null);\n    if (!title || !body) {\n      return setErrorMessage(\"請輸入文章標題與內容\");\n    }\n    if (!user) {\n      return setErrorMessage(\"請登入後繼續\");\n    }\n\n    dispatch(editPost(id, title, body)).then((newPostResponse) => {\n      if (newPostResponse && newPostResponse.id) {\n        history.push(`/post/${newPostResponse.id}`);\n      }\n    });\n  };\n\n  return (\n    <NewPostContainer>\n      {user ? (\n        <NewPostForm onSubmit={handleSubmit}>\n          <NewPostHeader>發布文章：</NewPostHeader>\n          {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n          <NewPostTitle>\n            <NewPostTitleInput\n              value={title}\n              onChange={(e) => {\n                setTitle(e.target.value);\n              }}\n              placeholder=\"輸入文章標題\"\n            />\n          </NewPostTitle>\n          <NewPostBody>\n            <NewPostBodyTextarea\n              value={body}\n              onChange={(e) => {\n                setBody(e.target.value);\n              }}\n              placeholder=\"輸入文章內容\"\n              rows={20}\n            />\n          </NewPostBody>\n          <NewPostButtonWrapper>\n            <NewPostButton>送出</NewPostButton>\n          </NewPostButtonWrapper>\n        </NewPostForm>\n      ) : (\n        <ErrorMessage>\"請登入後繼續\"</ErrorMessage>\n      )}\n    </NewPostContainer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport { setAuthToken } from \"../../utils\";\nimport { setUser } from \"../../redux/reducers/userReducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst HeaderContainer = styled.div`\n  height: 64px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n  padding: 0px 32px;\n  box-sizing: border-box;\n  background: white;\n`;\n\nconst Brand = styled.div`\n  font-size: 32px;\n  font-weight: bold;\n`;\n\nconst NavbarList = styled.div`\n  display: flex;\n  align-items: center;\n  height: 64px;\n`;\n\nconst Nav = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  box-sizing: border-box;\n  width: 100px;\n  cursor: pointer;\n  color: black;\n  text-decoration: none;\n\n  &:hover {\n    background: rgba(0, 0, 0, 0.1);\n  }\n\n  ${(props) =>\n    props.$active &&\n    `\n  background: rgba(0,0,0,0.1)\n  `};\n`;\n\nconst LeftContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  ${NavbarList} {\n    margin-left: 64px;\n  }\n`;\n\nexport default function Header() {\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const user = useSelector((store) => store.users.user);\n  const isLoadingGetMe = useSelector((store) => store.users.isLoadingGetMe);\n\n  const handleLogout = () => {\n    setAuthToken(\"\");\n    dispatch(setUser(null));\n\n    if (location.pathname !== \"/\") {\n      history.push(\"/\");\n    }\n  };\n\n  return (\n    <HeaderContainer>\n      <LeftContainer>\n        <Brand>我的第一個部落格</Brand>\n        <NavbarList>\n          <Nav to=\"/\" $active={location.pathname === \"/\"}>\n            首頁\n          </Nav>\n          <Nav to=\"/about-me\" $active={location.pathname === \"/about-me\"}>\n            關於我\n          </Nav>\n        </NavbarList>\n      </LeftContainer>\n      {!isLoadingGetMe && (\n        <NavbarList>\n          {user ? (\n            <>\n              <Nav to=\"/newpost\" $active={location.pathname === \"/newpost\"}>\n                發布文章\n              </Nav>\n              <Nav onClick={handleLogout}>登出</Nav>\n            </>\n          ) : (\n            <>\n              <Nav to=\"/register\" $active={location.pathname === \"/register\"}>\n                註冊\n              </Nav>\n              <Nav to=\"/login\" $active={location.pathname === \"/login\"}>\n                登入\n              </Nav>\n            </>\n          )}\n        </NavbarList>\n      )}\n    </HeaderContainer>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  LoginPage,\n  HomePage,\n  PostPage,\n  AboutMePage,\n  NewPostPage,\n  RegisterPage,\n  EditPage,\n} from \"../../pages/\";\nimport Header from \"../Header/\";\nimport { getUser, setIsLoadingGetMe } from \"../../redux/reducers/userReducer\";\nimport { useDispatch } from \"react-redux\";\n\nconst Root = styled.div`\n  padding-top: 64px;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getUser());\n    dispatch(setIsLoadingGetMe(false));\n  }, [dispatch]);\n\n  return (\n    <Root>\n      <Router basename=\"/w24-react-redux-blog\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route path=\"/register\">\n            <RegisterPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route path=\"/post/:id\">\n            <PostPage />\n          </Route>\n          <Route path=\"/newpost\">\n            <NewPostPage />\n          </Route>\n          <Route path=\"/about-me\">\n            <AboutMePage />\n          </Route>\n          <Route path=\"/edit/:id\">\n            <EditPage />\n          </Route>\n        </Switch>\n      </Router>\n    </Root>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport postReducer from \"./reducers/postReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postReducer,\r\n    users: userReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}